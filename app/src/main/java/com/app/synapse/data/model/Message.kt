package com.app.synapse.data.model

import com.google.firebase.firestore.DocumentId
import com.google.firebase.firestore.ServerTimestamp
import java.util.Date

/**
 * Represents a single chat message.
 *
 * @param id The unique ID of the message (auto-generated by Firestore).
 * @param channelId The ID of the channel this message belongs to.
 * @param senderId The ID of the user who sent the message (Firebase Auth UID for anonymous users).
 * @param senderName The display name of the sender (optional, can be fetched or stored denormalized).
 * @param text The textual content of the message.
 * @param imageUrl URL if the message is an image (optional).
 * @param timestamp Timestamp of when the message was sent (server-side).
 * @param type An optional type field, e.g., "text", "image", "system_notification".
 * @param isRead A flag to indicate if the message has been read by the current user (client-side logic).
 */
data class Message(
    @DocumentId
    var id: String = "",
    val channelId: String = "",
    val senderId: String = "",      // Firebase Auth UID for anonymous users
    val senderName: String? = null, // Could be "Anonymous" or a generated name
    val text: String? = null,       // Nullable if messages can be image-only
    val imageUrl: String? = null,   // For image messages
    @ServerTimestamp
    val timestamp: Date? = null,    // Firestore will set this
    val type: String = MESSAGE_TYPE_TEXT, // Default to text, could be "image"
    // val reactions: Map<String, Int>? = null, // For message reactions
    // var isRead: Boolean = false // This would typically be client-side state or user-specific subcollection
) {
    // No-argument constructor for Firestore deserialization
    constructor() : this("", "", "", null, null, null, null, MESSAGE_TYPE_TEXT)

    companion object {
        const val MESSAGE_TYPE_TEXT = "text"
        const val MESSAGE_TYPE_IMAGE = "image"
        // Add other types if needed, e.g., "system" for admin messages
    }
}
